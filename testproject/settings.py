"""
Django settings for testproject project.

Generated by 'django-admin startproject' using Django 1.8.17.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '4e)56prmnaa806y!-*9iq#54m4#kgpijn0q*%w5me#g&*(sxs+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'dynamic_logging',
    'testproject.testapp',
    'debug_toolbar',
)

MIDDLEWARE_CLASSES = (
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'testproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'testproject', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'testproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'TEST': {
            'NAME': ':memory:'
        }
    }
}

try:  # pragma: nocover
    import teamcity
    if teamcity.is_running_under_teamcity():  # pragma: nocover
        TEST_RUNNER = "teamcity.django.TeamcityDjangoRunner"
except ImportError:  # pragma: nocover
    pass

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "testproject", "static"),
]

STATIC_ROOT = os.path.join(BASE_DIR, "static_root")


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        },
        'colored': {  # a nice colored format for terminal output
            'format': '\033[1;33m%(levelname)s\033[0m [\033[1;31m%(thread)d\033[0m [\033[1;31m%(name)s'
                      '\033[0m:\033[1;32m%(lineno)s'
                      '\033[0m:\033[1;35m%(funcName)s\033[0m] \033[1;37m%(message)s\033[0m'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'polite': {
            '()': 'testproject.filter.PoliteFilter'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'colored',
        },
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
            'formatter': 'simple',
        },
        'devnull': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '/dev/null',
        },
        'mock': {
            'level': 'DEBUG',
            'class': 'dynamic_logging.handlers.MockHandler',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['null'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['null'],
            'level': 'ERROR',
            'propagate': True,
        },
        'testproject.testapp': {
            'handlers': ['null', 'devnull'],
            'level': 'DEBUG',
            'propagate': False
        },
        'dynamic_logging': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False
        },
        'dynamic_logging.scheduler': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False
        }
    }
}

INTERNAL_IPS = ['127.0.0.1']
_timer_prop = os.environ.get('TIMER_PROPAGATOR', 'signal')
if _timer_prop == 'signal':

    DYNAMIC_LOGGING = {
        "upgrade_propagator": {'class': "dynamic_logging.propagator.ThreadSignalPropagator", 'config': {}}
    }
elif _timer_prop == 'timer':  # pragma: nocover
    DYNAMIC_LOGGING = {
        "upgrade_propagator": {'class': "dynamic_logging.propagator.TimerPropagator", 'config': {'interval': 15}}
    }
elif _timer_prop == 'amqp':  # pragma: nocover
    DYNAMIC_LOGGING = {
        "upgrade_propagator": {'class': "dynamic_logging.propagator.AmqpPropagator",
                               'config': {'url': 'amqp://guest:guest@localhost:5672/%2F'}}
    }
elif _timer_prop == 'dummy':  # pragma: nocover
    DYNAMIC_LOGGING = {
        "upgrade_propagator": {'class': "dynamic_logging.propagator.DummyPropagator", 'config': {}}
    }
else:  # pragma: nocover
    raise Exception("%s is not a valid timer propagator. choose one of signal,timer,amqp,dummy")
